{"version":3,"sources":["components/Login.js","components/JobsTable.js","components/AddJob.js","components/EditJob.js","components/Filter.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setUser","setJobs","useState","formType","setFormType","username","setUsername","password","setPassword","switchFormType","type","Form","onSubmit","e","preventDefault","axios","post","then","res","toast","icon","localStorage","setItem","data","access_token","JSON","stringify","jobs","catch","err","response","status","error","Group","className","controlId","Label","Control","autoComplete","placeholder","value","onChange","target","Button","variant","style","float","marginRight","onClick","paddingRight","paddingLeft","loading","setTimeout","dismiss","success","JobsTable","filter","filteredJobs","setShowEditJob","setJobToEdit","deleteJob","Table","striped","bordered","hover","categoriesToShow","result","show","job_title","company","job_description","salary","applied_date","post_date","link","notes","map","job","Badge","bg","toUpperCase","split","href","rel","size","job_id","AddJob","handleClose","handleShow","jobStatus","setJobStatus","jobTitle","setJobTitle","setCompany","jobDescription","setJobDescription","setSalary","jobPostDate","setJobPostDate","jobAppliedDate","setJobAppliedDate","setLink","setNotes","validForm","clearForm","Modal","onHide","backdrop","dialogClassName","Header","closeButton","Title","Body","ButtonGroup","name","radio","idx","ToggleButton","id","checked","currentTarget","Text","as","rows","min","max","Footer","d","Date","month","getMonth","toString","day","getDate","getFullYear","token","getItem","config","headers","Authorization","console","log","EditJob","jobToEdit","addJobStatus","setAddJobStatus","useEffect","put","newJobs","Filter","setFilter","newFilter","parse","searchQuery","Select","resultsToShow","Object","keys","key","some","i","Check","label","defaultChecked","App","user","showAddJob","setShowAddJob","showEditJob","get","handleShowAddJob","query","found","entries","includes","toLowerCase","queryFoundInJob","Navbar","Container","Brand","Nav","Link","clear","newClass","document","getElementById","window","confirm","delete","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.55bb0b01.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nimport axios from 'axios';\r\n// const baseURL = 'http://localhost:8080';\r\nconst baseURL = '';\r\n\r\n\r\nconst Login = ({ setUser, setJobs }) => {\r\n    const [formType, setFormType] = useState('login');\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const switchFormType = (type) => {\r\n        setFormType(type);\r\n        setUsername('');\r\n        setPassword('');\r\n    }\r\n\r\n    const login = (e) => {\r\n        e.preventDefault();\r\n        if (!username && !password) {\r\n            toast.error(\"Please enter username and password\");\r\n            return\r\n        }\r\n        if (!username) {\r\n            toast.error(\"Please enter username\");\r\n            return\r\n        }\r\n        if (!password) {\r\n            toast.error(\"Please enter password\");\r\n            return\r\n        }\r\n        axios\r\n            .post(baseURL + '/login',\r\n                {\r\n                    username: username,\r\n                    password: password\r\n                }).then((res) => {\r\n                    toast(`Welcome ${username}!`, {\r\n                        icon: '🤗',\r\n                      });\r\n                    localStorage.setItem(\"auth_token\", res.data.access_token);\r\n                    localStorage.setItem(\"username\", res.data.username);\r\n                    localStorage.setItem(\"jobs\", JSON.stringify(res.data.jobs));\r\n                    setUser(res.data.username);\r\n                    setJobs(res.data.jobs);\r\n                }).catch((err) => {\r\n                    if (err.response && err.response.status === 404) {\r\n                        toast.error(\"Account does not exist\");\r\n                    } else if (err.response && err.response.status === 401) {\r\n                        toast.error(\"Incorrect username and/or password\")\r\n                    } else {\r\n                        toast.error(\"Please try again later...\")\r\n                    }\r\n                });\r\n    }\r\n\r\n    const register = (e) => {\r\n        e.preventDefault();\r\n        if (!username && !password) {\r\n            toast.error(\"Please enter a username and password\");\r\n            return\r\n        }\r\n        if (!username) {\r\n            toast.error(\"Please enter a username\");\r\n            return\r\n        }\r\n        if (!password) {\r\n            toast.error(\"Please enter a password\");\r\n            return\r\n        }\r\n        toast.loading('Registering...');\r\n        axios\r\n            .post(baseURL + '/register',\r\n                {\r\n                    username: username,\r\n                    password: password\r\n                }).then((res) => {\r\n                    setTimeout(() => {\r\n                        toast.dismiss();\r\n                        toast.success(\"Successfully registered!\");\r\n                        localStorage.setItem(\"auth_token\", res.data.access_token);\r\n                        localStorage.setItem(\"username\", res.data.username);\r\n                        localStorage.setItem(\"jobs\", JSON.stringify([]));\r\n                        setUser(res.data.username);\r\n                        setJobs([]);\r\n                    }, 3000);\r\n                }).catch((err) => {\r\n                    toast.dismiss();\r\n                    if (err.response.status === 401) {\r\n                        toast.error(\"Sorry! This username is taken.\")\r\n                    } else {\r\n                        toast.error(\"Please try again later...\")\r\n                    }\r\n                });\r\n    }\r\n\r\n    if (formType === 'login') {\r\n        return (\r\n            <div>\r\n                <Toaster />\r\n                <h1>Job Tracker</h1>\r\n                <Form onSubmit={login}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"string\" autoComplete=\"off\" placeholder=\"Enter username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" autoComplete=\"off\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" style={{float: 'right'}} type=\"submit\">\r\n                        Login\r\n                    </Button>\r\n                    <Button variant=\"primary\" style={{float: 'right', marginRight: '5px'}} onClick={() => {\r\n                        setUsername(\"demo\");\r\n                        setPassword(\"demoabc123\");\r\n                    }}>\r\n                        Demo Account\r\n                    </Button>\r\n                    <Button variant=\"link\" style={{ paddingRight: '0px', paddingLeft: '0px' }} onClick={() => switchFormType('register')}>Register</Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    } else if (formType === 'register') {\r\n        return (\r\n            <div>\r\n                <Toaster />\r\n                <h1>Register</h1>\r\n                <Form onSubmit={register} autoComplete=\"off\">\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control type=\"string\" autoComplete=\"off\" placeholder=\"Enter username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control type=\"password\" autoComplete=\"off\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" style={{float: 'right'}} type=\"submit\">\r\n                        Sign up\r\n                    </Button>\r\n                    <p><Button variant=\"link\" style={{ paddingRight: '0px', paddingLeft: '0px' }} onClick={() => switchFormType('login')}>Login</Button></p>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import Table from 'react-bootstrap/Table';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport { AiOutlineDelete } from 'react-icons/ai'\r\nimport { AiOutlineEdit } from 'react-icons/ai';\r\n\r\nconst JobsTable = ({ filter, filteredJobs, setShowEditJob, setJobToEdit, deleteJob }) => {\r\n\r\n\r\n    return (\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr className=\"table-header-row\">\r\n                    {filter.categoriesToShow.result.show && <th>Result</th>}\r\n                    {filter.categoriesToShow.job_title.show && <th>Job Title</th>}\r\n                    {filter.categoriesToShow.company.show && <th>Company</th>}\r\n                    {filter.categoriesToShow.job_description.show && <th>Job Description</th>}\r\n                    {filter.categoriesToShow.salary.show && <th>Salary</th>}\r\n                    {filter.categoriesToShow.applied_date.show && <th>Applied Date</th>}\r\n                    {filter.categoriesToShow.post_date.show && <th>Post Date</th>}\r\n                    {filter.categoriesToShow.link.show && <th>Link</th>}\r\n                    {filter.categoriesToShow.notes.show && <th>Notes</th>}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    filteredJobs.map((job) => {\r\n                        return (\r\n                            <tr key={job.job_id}>\r\n                                {job.result === 'not applied' && <td><Badge bg=\"secondary\">{job.result.toUpperCase()}</Badge></td>}\r\n                                {job.result === 'applied' && <td><Badge bg=\"warning\">{job.result.toUpperCase()}</Badge></td>}\r\n                                {job.result === 'interview' && <td><Badge bg=\"info\">{job.result.toUpperCase()}</Badge></td>}\r\n                                {job.result === 'waiting' && <td><Badge bg=\"success\">{job.result.toUpperCase()}</Badge></td>}\r\n                                {job.result === 'rejected' && <td><Badge bg=\"danger\">{job.result.toUpperCase()}</Badge></td>}\r\n                                {filter.categoriesToShow.job_title.show && <td>{job.job_title}</td>}\r\n                                {filter.categoriesToShow.company.show && <td>{job.company}</td>}\r\n                                {filter.categoriesToShow.job_description.show && <td>{job.job_description}</td>}\r\n                                {filter.categoriesToShow.salary.show && <td>{job.salary !== 0 ? job.salary : 'n/a'}</td>}\r\n                                {filter.categoriesToShow.applied_date.show && <td className=\"center-text\">{job.applied_date.split('T')[0]}</td>}\r\n                                {filter.categoriesToShow.post_date.show && <td className=\"center-text\">{job.post_date.split('T')[0]}</td>}\r\n                                {filter.categoriesToShow.link.show && <td><a href={\"//\" + job.link} target=\"_blank\" rel=\"noreferrer\">{job.link}</a></td>}\r\n                                {filter.categoriesToShow.notes.show && <td>{job.notes}</td>}\r\n\r\n                                <td>\r\n                                    <AiOutlineEdit\r\n                                        size=\"1.5em\"\r\n                                        onClick={() => {\r\n                                            setShowEditJob(true);\r\n                                            setJobToEdit(job);\r\n                                        }}\r\n                                        className=\"hover-btn\"\r\n                                    />\r\n                                    <AiOutlineDelete\r\n                                        size=\"1.5em\"\r\n                                        onClick={() => deleteJob(job.job_id)}\r\n                                        className=\"hover-btn\"\r\n                                    />\r\n\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default JobsTable;","import React, { useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport toast from 'react-hot-toast';\r\nimport axios from 'axios';\r\n// const baseURL = 'http://localhost:8080';\r\nconst baseURL = '';\r\n\r\nconst AddJob = ({ handleClose, handleShow, show, jobs, setJobs }) => {\r\n    const [jobStatus, setJobStatus] = useState('not applied');\r\n    const [jobTitle, setJobTitle] = useState('');\r\n    const [company, setCompany] = useState('');\r\n    const [jobDescription, setJobDescription] = useState('');\r\n    const [salary, setSalary] = useState(0);\r\n    const [jobPostDate, setJobPostDate] = useState('');\r\n    const [jobAppliedDate, setJobAppliedDate] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n\r\n    const radios = [\r\n        { name: 'Not applied', value: 'not applied', variant: 'outline-secondary' },\r\n        { name: 'Applied', value: 'applied', variant: 'outline-warning' },\r\n        { name: 'Interview', value: 'interview', variant: 'outline-info' },\r\n        { name: 'Waiting', value: 'waiting', variant: 'outline-success' },\r\n        { name: 'Rejected', value: 'rejected', variant: 'outline-danger' },\r\n    ];\r\n\r\n    const createJob = () => {\r\n        if (!validForm()) {\r\n            toast.dismiss()\r\n            toast.error('Please fill out form.');\r\n            return;\r\n        }\r\n        toast.loading('Adding job...');\r\n        const token = localStorage.getItem(\"auth_token\");\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        }\r\n        axios\r\n            .post(baseURL + '/jobs', \r\n            {\r\n                result: jobStatus,\r\n                job_title: jobTitle,\r\n                company: company,\r\n                job_description: jobDescription,\r\n                salary: salary,\r\n                post_date: jobPostDate,\r\n                applied_date: jobAppliedDate,\r\n                link: link,\r\n                notes: notes\r\n            }, config\r\n            ).then((res) => {\r\n                toast.dismiss();\r\n                toast.success(\"Added new job!\");\r\n                if (res.status === 200) {\r\n                    setJobs([...jobs, res.data.job])\r\n                    localStorage.setItem(\"jobs\", JSON.stringify([...jobs, res.data.job]));\r\n                    clearForm();\r\n                    handleClose();\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                toast.dismiss();\r\n                toast.error(\"Failed to add job. Please try again.\")\r\n            })\r\n    }\r\n\r\n    const validForm = () => {\r\n        if (!jobTitle || !company || !jobDescription || !salary || !link || !jobStatus) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const closeModal = () => {\r\n        clearForm();\r\n        handleClose();\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setJobTitle('');\r\n        setCompany('');\r\n        setJobDescription('');\r\n        setSalary('');\r\n        setJobPostDate('');\r\n        setJobAppliedDate('');\r\n        setLink('');\r\n        setNotes('');\r\n        setJobStatus('not applied')\r\n    }\r\n\r\n    const fillInFormValues = () => {\r\n        const d = new Date();\r\n        let month = d.getMonth() + 1 < 10 ? '0' + (d.getMonth() + 1).toString() : d.getMonth() + 1\r\n        let day = d.getDate() < 10 ? '0' + d.getDate().toString() : d.getDate()\r\n\r\n        setJobStatus('interview')\r\n        setJobTitle('DevOps Engineer');\r\n        setCompany('Untitled Company');\r\n        setJobDescription('Engage and improve life-cycle of service from inception and design to deployment, operation, migration and sunsets - Well organized and strict alignment to SLAs - Experience working with different teams to coordinate and execute critical projects - Write, review and develop code and documentation that solves the hardest problems on some of the largest and most complex systems - Real passion for quality and automation, ability to understand complex systems and a desire to constantly make things better - Prioritize and work efficiently in a fast-paced environment - Measure and optimize system performance - Strong interpersonal skills - Demonstrate ability to deliver results on time with high quality - Share on-call rotation with the existing team members to provide 24x7 support');\r\n        setSalary(499999);\r\n        setJobPostDate(`${d.getFullYear()}-${month}-${day}`);\r\n        setJobAppliedDate(`${d.getFullYear()}-${month}-${day}`);\r\n        setLink('indeed.ca');\r\n    }\r\n    \r\n    return (\r\n        <Modal show={show} onHide={handleClose} backdrop=\"static\" dialogClassName=\"addJobModal\">\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Add New Job</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Select Job Status</Form.Label>\r\n                    <div>\r\n                        <ButtonGroup className=\"mb-2\">\r\n                            {radios.map((radio, idx) => (\r\n                                <ToggleButton\r\n                                    key={idx}\r\n                                    id={`radio-${idx}`}\r\n                                    type=\"radio\"\r\n                                    variant={radio.variant}\r\n                                    name=\"radio\"\r\n                                    value={radio.value}\r\n                                    checked={jobStatus === radio.value}\r\n                                    onChange={(e) => setJobStatus(e.currentTarget.value)}\r\n                                >\r\n                                    {radio.name}\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobTitle\">\r\n                    <Form.Label>Job Title</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter title\" value={jobTitle} onChange={(e) => setJobTitle(e.target.value)}/>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formCompany\">\r\n                    <Form.Label>Company</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter email\" value={company} onChange={(e) => setCompany(e.target.value)} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobDescription\">\r\n                    <Form.Label>Job Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Enter description\" value={jobDescription} onChange={(e) => setJobDescription(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formSalary\">\r\n                    <Form.Label>Salary</Form.Label>\r\n                    <Form.Control type=\"number\" min=\"0\" max=\"500000\" value={salary} onChange={(e) => setSalary(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobPostDate\">\r\n                    <Form.Label>Job Post Date</Form.Label>\r\n                    <Form.Control type=\"date\" value={jobPostDate} onChange={(e) => setJobPostDate(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobAppliedDate\">\r\n                    <Form.Label>Applied Date</Form.Label>\r\n                    <Form.Control type=\"date\" value={jobAppliedDate} onChange={(e) => setJobAppliedDate(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formLink\">\r\n                    <Form.Label>Link</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter url\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formNotes\">\r\n                    <Form.Label>Notes</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Enter any notes here\" value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n                </Form.Group>\r\n            </Form>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" style={{marginRight: \"auto\"}} onClick={fillInFormValues}>\r\n                Demo: Fill in sample values\r\n            </Button>\r\n            <Button variant=\"warning\" onClick={clearForm}>\r\n                Clear\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={closeModal}>\r\n                Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={createJob}>\r\n                Save Job\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default AddJob;","import React, { useState, useEffect } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport toast from 'react-hot-toast';\r\nimport axios from 'axios';\r\n// const baseURL = 'http://localhost:8080';\r\nconst baseURL = '';\r\n\r\nconst EditJob = ({ handleClose, show, jobToEdit, setJobToEdit, jobs, setJobs }) => {\r\n    const [addJobStatus, setAddJobStatus] = useState('');\r\n    const [jobTitle, setJobTitle] = useState('');\r\n    const [company, setCompany] = useState('');\r\n    const [jobDescription, setJobDescription] = useState('');\r\n    const [salary, setSalary] = useState(0);\r\n    const [jobPostDate, setJobPostDate] = useState('');\r\n    const [jobAppliedDate, setJobAppliedDate] = useState('');\r\n    const [link, setLink] = useState('');\r\n    const [notes, setNotes] = useState('');\r\n\r\n    useEffect(() => {\r\n        setAddJobStatus(jobToEdit.result);\r\n        setJobTitle(jobToEdit.job_title);\r\n        setCompany(jobToEdit.company);\r\n        setJobDescription(jobToEdit.job_description);\r\n        setSalary(jobToEdit.salary);\r\n        setJobPostDate(jobToEdit.post_date.split('T')[0]);\r\n        setJobAppliedDate(jobToEdit.applied_date.split('T')[0]);\r\n        setLink(jobToEdit.link);\r\n        setNotes(jobToEdit.notes);\r\n    }, [jobToEdit.result, jobToEdit.job_title, jobToEdit.company, jobToEdit.job_description, jobToEdit.salary, jobToEdit.post_date, jobToEdit.applied_date, jobToEdit.link, jobToEdit.notes])\r\n\r\n    const radios = [\r\n        { name: 'Not applied', value: 'not applied', variant: 'outline-secondary' },\r\n        { name: 'Applied', value: 'applied', variant: 'outline-warning' },\r\n        { name: 'Interview', value: 'interview', variant: 'outline-info' },\r\n        { name: 'Waiting', value: 'waiting', variant: 'outline-success' },\r\n        { name: 'Rejected', value: 'rejected', variant: 'outline-danger' },\r\n    ];\r\n\r\n    const updateJob = () => {\r\n        if (!validForm()) {\r\n            toast.dismiss()\r\n            toast.error('Please fill out form.');\r\n            return;\r\n        }\r\n        toast.loading('Updating job...');\r\n        const token = localStorage.getItem(\"auth_token\");\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        }\r\n        axios\r\n            .put(baseURL + '/jobs', \r\n            {\r\n                job_id: jobToEdit.job_id,\r\n                result: addJobStatus,\r\n                job_title: jobTitle,\r\n                company: company,\r\n                job_description: jobDescription,\r\n                salary: salary,\r\n                post_date: jobPostDate,\r\n                applied_date: jobAppliedDate,\r\n                link: link,\r\n                notes: notes\r\n            }, config\r\n            ).then((res) => {\r\n                toast.dismiss();\r\n                toast.success(\"Updated job\");\r\n                if (res.status === 200) {\r\n                    let newJobs = jobs.map((job) => job.job_id === jobToEdit.job_id ? res.data.job : job)\r\n                    setJobs(newJobs)\r\n                    localStorage.setItem(\"jobs\", JSON.stringify(newJobs));\r\n                    handleClose();\r\n                    setJobToEdit(null);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                toast.dismiss();\r\n                toast.error(\"Failed to update job. Please try again.\")\r\n            })\r\n    }\r\n\r\n    const validForm = () => {\r\n        if (!jobTitle || !company || !jobDescription || !salary || !link || !addJobStatus) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    const closeModal = () => {\r\n        clearForm();\r\n        handleClose();\r\n    }\r\n\r\n    const clearForm = () => {\r\n        setJobTitle('');\r\n        setCompany('');\r\n        setJobDescription('');\r\n        setSalary('');\r\n        setJobPostDate('');\r\n        setJobAppliedDate('');\r\n        setLink('');\r\n        setNotes('');\r\n        setAddJobStatus('not applied')\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose} backdrop=\"static\" dialogClassName=\"addJobModal\">\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Edit Job</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Select Job Status</Form.Label>\r\n                    <div>\r\n                        <ButtonGroup className=\"mb-2\">\r\n                            {radios.map((radio, idx) => (\r\n                                <ToggleButton\r\n                                    key={idx}\r\n                                    id={`radio-${idx}`}\r\n                                    type=\"radio\"\r\n                                    variant={radio.variant}\r\n                                    name=\"radio\"\r\n                                    value={radio.value}\r\n                                    checked={addJobStatus === radio.value}\r\n                                    onChange={(e) => setAddJobStatus(e.currentTarget.value)}\r\n                                >\r\n                                    {radio.name}\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ButtonGroup>\r\n                    </div>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobTitle\">\r\n                    <Form.Label>Job Title</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter title\" value={jobTitle} onChange={(e) => setJobTitle(e.target.value)}/>\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formCompany\">\r\n                    <Form.Label>Company</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter email\" value={company} onChange={(e) => setCompany(e.target.value)} />\r\n                    <Form.Text className=\"text-muted\">\r\n                        Required\r\n                    </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobDescription\">\r\n                    <Form.Label>Job Description</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Enter description\" value={jobDescription} onChange={(e) => setJobDescription(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formSalary\">\r\n                    <Form.Label>Salary</Form.Label>\r\n                    <Form.Control type=\"number\" min=\"0\" max=\"500000\" value={salary} onChange={(e) => setSalary(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobPostDate\">\r\n                    <Form.Label>Job Post Date</Form.Label>\r\n                    <Form.Control type=\"date\" value={jobPostDate} onChange={(e) => setJobPostDate(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formJobAppliedDate\">\r\n                    <Form.Label>Applied Date</Form.Label>\r\n                    <Form.Control type=\"date\" value={jobAppliedDate} onChange={(e) => setJobAppliedDate(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formLink\">\r\n                    <Form.Label>Link</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Enter url\" value={link} onChange={(e) => setLink(e.target.value)} />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3\" controlId=\"formNotes\">\r\n                    <Form.Label>Notes</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Enter any notes here\" value={notes} onChange={(e) => setNotes(e.target.value)} />\r\n                </Form.Group>\r\n            </Form>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={closeModal}>\r\n                Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={updateJob}>\r\n                Update\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n    )\r\n}\r\n\r\nexport default EditJob;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst Filter = ({ filter, setFilter }) => {\r\n\r\n    return (\r\n        <Form>\r\n            <div className=\"filter-main\">\r\n                <div className=\"filter-section\">\r\n                    <h4>Search</h4>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formSearch\">\r\n                        <Form.Control type=\"text\" placeholder=\"Enter search value\" onChange={\r\n                            (e) => {\r\n                                let newFilter = JSON.parse(JSON.stringify(filter));\r\n                                newFilter.searchQuery = e.target.value;\r\n                                setFilter(newFilter);\r\n                            }\r\n                        }/>\r\n                        <Form.Text className=\"text-muted\">\r\n                        Searches all categories except for <b>result</b>, <b>salary</b>, and <b>job description</b>.\r\n                        </Form.Text>\r\n                    </Form.Group>\r\n                </div>\r\n\r\n                <div className=\"filter-section\">\r\n                    <h4>Show applications for specific results</h4>\r\n                    <Form.Select aria-label=\"Default select example\"\r\n                        onChange={(e) => {\r\n                            let newFilter = JSON.parse(JSON.stringify(filter));\r\n                            newFilter.resultsToShow = e.target.value;\r\n                            setFilter(newFilter)\r\n                        }}\r\n                    >\r\n                        <option value=\"all\">All results</option>\r\n                        <option value=\"not applied\">Not Applied</option>\r\n                        <option value=\"applied\">Applied</option>\r\n                        <option value=\"interview\">Interview</option>\r\n                        <option value=\"waiting\">Waiting</option>\r\n                        <option value=\"rejected\">Rejected</option>\r\n                    </Form.Select>\r\n                    <Form.Text className=\"text-muted\">\r\n                        By default, all results are shown.\r\n                    </Form.Text>\r\n                </div>\r\n\r\n                <div className=\"filter-section\">\r\n                    <h4>Show Categories</h4>\r\n                    <div className=\"filter-hide-section\">\r\n                        {Object.keys(filter.categoriesToShow).map((key) => {\r\n                            if ([\"result\", \"job_title\", \"company\"].some(i => i === key)) {\r\n                                return null\r\n                            }\r\n                            return (\r\n                            <div key={key} className=\"filter-hide-category\">\r\n                                <Form.Check\r\n                                    type=\"checkbox\"\r\n                                    id={filter.categoriesToShow[key].name}\r\n                                    label={filter.categoriesToShow[key].name}\r\n                                    defaultChecked={filter.categoriesToShow[key].show}\r\n                                    onClick={(e) => {\r\n                                        let newFilter = JSON.parse(JSON.stringify(filter));\r\n                                        newFilter.categoriesToShow[key].show = e.target.checked;\r\n                                        setFilter(newFilter)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Login from './components/Login';\r\nimport JobsTable from './components/JobsTable';\r\nimport AddJob from './components/AddJob';\r\nimport EditJob from './components/EditJob';\r\nimport Filter from './components/Filter';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n// const baseURL = 'http://localhost:8080';\r\nconst baseURL = '';\r\n\r\nconst App = () => {\r\n    const [user, setUser] = useState(null);\r\n    const [jobs, setJobs] = useState([]);\r\n    const [showAddJob, setShowAddJob] = useState(false);\r\n    const [showEditJob, setShowEditJob] = useState(false);\r\n    const [jobToEdit, setJobToEdit] = useState(null);\r\n    const [filter, setFilter] = useState({\r\n        categoriesToShow: {\r\n            result: {\r\n                name: \"Result\",\r\n                show: true\r\n            },\r\n            job_title: {\r\n                name: \"Job title\",\r\n                show: true\r\n            },\r\n            company: {\r\n                name: \"Company\",\r\n                show: true\r\n            },\r\n            job_description: {\r\n                name: \"Job description\",\r\n                show: true\r\n            },\r\n            salary: {\r\n                name: \"Salary\",\r\n                show: true\r\n            },\r\n            applied_date: {\r\n                name: \"Applied date\",\r\n                show: true\r\n            },\r\n            post_date: {\r\n                name: \"Post date\",\r\n                show: true\r\n            },\r\n            link: {\r\n                name: \"Link\",\r\n                show: true\r\n            },\r\n            notes: {\r\n                name: \"Notes\",\r\n                show: true\r\n            }\r\n        },\r\n        resultsToShow: \"all\",\r\n        searchQuery: \"\"\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"auth_token\") && localStorage.getItem(\"username\")) {\r\n            const token = localStorage.getItem(\"auth_token\");\r\n            const config = {\r\n                headers: { Authorization: `Bearer ${token}` }\r\n            }\r\n            axios\r\n                .get(baseURL + '/jobs', config)\r\n                .then((res) => {\r\n                    const username = localStorage.getItem(\"username\");\r\n                    localStorage.setItem(\"jobs\", JSON.stringify(res.data.jobs));\r\n                    setUser(username);\r\n                    setJobs(res.data.jobs);\r\n                }).catch((err) => {\r\n                    console.log(err)\r\n                });\r\n            setUser(localStorage.getItem(\"username\"));\r\n        }\r\n    }, [])\r\n\r\n    const handleCloseAddJob = () => {\r\n        setShowAddJob(false);\r\n    };\r\n    const handleShowAddJob = () => setShowAddJob(true);\r\n\r\n    const handleToggleEditJob = () => {\r\n        setShowEditJob(!showEditJob);\r\n    }\r\n\r\n    const logout = () => {\r\n        toast.dismiss();\r\n        localStorage.clear();\r\n        setUser(null);\r\n        setJobs(null);\r\n    }\r\n\r\n    const deleteJob = (id) => {\r\n        let confirm = window.confirm(\"Are you sure you want to delete this job?\");\r\n        if (!confirm) {\r\n            return;\r\n        }\r\n        const token = localStorage.getItem(\"auth_token\");\r\n        const config = {\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        }\r\n        axios\r\n            .delete(baseURL + '/jobs/' + id, config)\r\n            .then((res) => {\r\n                if (res.status === 200) {\r\n                    toast.success(\"Job deleted\");\r\n                    let newJobs = jobs.filter(job => job.job_id !== res.data.job_id);\r\n                    localStorage.setItem(\"jobs\", JSON.stringify(newJobs));\r\n                    setJobs(newJobs);\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err)\r\n                toast.error(\"Failed to retrieve jobs. Please try again later...\")\r\n            })\r\n    }\r\n\r\n    const toggleFilter = () => {\r\n        const oldClass = document.getElementById(\"filter\").className;\r\n        const newClass = oldClass === \"hidden panel\" ? \"visible panel\" : \"hidden panel\";\r\n        document.getElementById(\"filter\").className = newClass;\r\n    }\r\n\r\n    const queryFoundInJob = (query, job) => {\r\n        let found = false;\r\n        for (const [key, value] of Object.entries(job)) {\r\n            if (![\"result\", \"salary\", \"user_id\", \"job_id\", \"job_description\"].includes(key)) {\r\n                if (value.toLowerCase().includes(query.toLowerCase())) {\r\n                    found = true;\r\n                }\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    let filteredJobs = filter.resultsToShow === \"all\" ? jobs : jobs.filter(job => job.result === filter.resultsToShow);\r\n    filteredJobs = filter.searchQuery === \"\" ? filteredJobs : filteredJobs.filter(job => queryFoundInJob(filter.searchQuery, job));\r\n\r\n    if (user && jobs) {\r\n        return (\r\n            <div className=\"main-logged-in\">\r\n                <Toaster />\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Container>\r\n                        <Navbar.Brand >Job Tracker</Navbar.Brand>\r\n                        <Nav className=\"me-auto\">\r\n                            <Nav.Link onClick={handleShowAddJob}>Add Job</Nav.Link>\r\n                            <Nav.Link onClick={() => logout()}>Logout ({user})</Nav.Link>\r\n                        </Nav>\r\n                    </Container>\r\n                </Navbar>\r\n                <div>\r\n                    <button className=\"accordion\" onClick={toggleFilter}>Filter</button>\r\n                    <div className=\"hidden panel\" id=\"filter\">\r\n                        <Filter filter={filter} setFilter={setFilter} />\r\n                    </div>\r\n                    <JobsTable filter={filter} filteredJobs={filteredJobs} setShowEditJob={setShowEditJob} setJobToEdit={setJobToEdit} deleteJob={deleteJob} />\r\n                </div>\r\n                {\r\n                    showAddJob &&\r\n                    <AddJob handleClose={handleCloseAddJob} handleShow={handleShowAddJob} show={showAddJob} jobs={jobs} setJobs={setJobs} />\r\n                }\r\n                {\r\n                    showEditJob &&\r\n                    <EditJob handleClose={handleToggleEditJob} show={showEditJob} jobToEdit={jobToEdit} setJobToEdit={setJobToEdit} jobs={jobs} setJobs={setJobs} />\r\n                }\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"login-div\">\r\n                    <Login setUser={setUser} setJobs={setJobs} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}